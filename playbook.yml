---
- name: Setup Docker Swarm
  hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: true
  vars:
    efs_mount_dir: /home/ubuntu/efs
  tasks:
    - name: Update cache & Install apt packages
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - nfs-common
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
    
    - name: Add an apt signing key for docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add docker repository into sources list
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
    
    - name: Update cache & Install docker
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - docker-ce
    
    - name: Ensure Docker service is enabled and started
      ansible.builtin.systemd_service:
        state: started
        name: docker    
        enabled: yes

    - name: Add user to the docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
    - name: Ensure efs mount directory exists.
      file:
        path: "{{ efs_mount_dir }}"
        state: directory
        mode: 0755
        owner: ubuntu
        group: ubuntu

    - name: Ensure EFS volume is mounted.
      mount:
        name: "{{ efs_mount_dir }}"
        src: "{{ hostvars[inventory_hostname].efs_endpoint }}"
        fstype: nfs4
        opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
        state: mounted

- name: Initialize Docker Swarm master
  hosts: manager
  remote_user: ubuntu
  become: true
  vars:
    docker_registry_username: ""
    docker_registry_password: ""
  tasks:
    - name: Initialize Docker Swarm
      ansible.builtin.shell: 
        cmd: docker swarm init
      register: swarm_init
      failed_when: "swarm_init.rc != 0 and 'This node is already part of a swarm' not in swarm_init.stderr"

    - name: Get Swarm join token
      ansible.builtin.shell: 
        cmd: docker swarm join-token -q worker
      register: swarm_join_token
    
    - name: Docker Login
      ansible.builtin.shell: |
        docker login ghcr.io -u {{ docker_registry_username }} -p {{ docker_registry_password }}
    
    - name: Get manager IP
      ansible.builtin.shell: 
        cmd: hostname -I | awk '{print $1}'
      register: manager_private_ip
    
    - name: debug
      ansible.builtin.debug:
        msg: IP {{ manager_private_ip.stdout }} , TOKEN {{ swarm_join_token.stdout }}
    
    - name: Set fact
      ansible.builtin.set_fact:
        manager_private_ip: "{{ manager_private_ip.stdout }}"
        swarm_join_token: "{{ swarm_join_token.stdout }}"
      delegate_facts: true

- name: Join Swarm Worker
  hosts: worker
  remote_user: ubuntu
  become: true
  tasks:
    - name: debug
      ansible.builtin.debug:
        msg: manager_private_ip {{ hostvars[groups['manager'][0]]['manager_private_ip'] }},  swarm_join_token {{ hostvars[groups['manager'][0]]['swarm_join_token'] }}
        #var: hostvars[groups['manager'][0]]['swarm_join_token']
    
    - name: Join Docker Swarm as a worker
      ansible.builtin.shell: 
        cmd: docker swarm join --token {{ hostvars[groups['manager'][0]]['swarm_join_token'] }} {{ hostvars[groups['manager'][0]]['manager_private_ip'] }}:2377
      register: swarm_join
      failed_when: "swarm_join.rc != 0 and 'This node is already part of a swarm' not in swarm_join.stderr"
